{"version":3,"sources":["components/TodoPage/TodoPage.module.css","components/TodoPage/TodoItem/TodoItem.module.css","api/api.ts","api/todo_api.ts","redux/todo_reducer.ts","components/TodoPage/TodoItem/TodoItem.tsx","components/TodoPage/TodoPage.tsx","components/Header/Header.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","db","TodosCollections","collection","doc","TodosPath","TodoAddArray","FieldValue","todoAPI","id","data","set","then","catch","text","isChecked","update","delete","cache","dataArray","get","source","querySnapshot","forEach","item","console","log","push","initialState","todos_data","actionsReducer","payload","type","getTodos","dispatch","a","todo_reducer","state","action","filter","todo","TodoItem","deleteTodoItem","onChangeChecked","useState","className","s","todoItem","onChange","e","target","checked","lined","onClick","TodoPage","useDispatch","todos_reducer","useSelector","deleteTodos","updateTodos","todosMap","map","onSubmitFormik","values","actions","addTodos","uniqId","setSubmitting","todoForm","initialValues","onSubmit","isSubmitting","form","name","placeholder","disabled","Header","href","App","useEffect","enablePersistence","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.d9f86099.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoForm\":\"TodoPage_todoForm__2m-al\",\"todoForm2\":\"TodoPage_todoForm2__HcCQz\",\"form\":\"TodoPage_form__3FeQz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lined\":\"TodoItem_lined__sSbF-\",\"todoItem\":\"TodoItem_todoItem__1dMjl\"};","import firebase from \"firebase\"\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDwOpDbk5LhGk55y99YJYa9sZPta219Mso\",\r\n    authDomain: \"react-messenger-273f0.firebaseapp.com\",\r\n    projectId: \"react-messenger-273f0\",\r\n    storageBucket: \"react-messenger-273f0.appspot.com\",\r\n    messagingSenderId: \"157440190043\",\r\n    appId: \"1:157440190043:web:aa6d87cb52aa72c55c417e\"\r\n  }\r\n\r\n\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n  let firestore = firebase.firestore()\r\n\r\nexport const db = {\r\n    TodosCollections: firestore.collection(\"todosCollection\").doc(\"JvXr2hWdg4eCIthMJ1Rs\").collection(\"todos\"),\r\n    TodosPath: firestore.doc(\"userBooks/library\"),\r\n    TodoAddArray: firebase.firestore.FieldValue\r\n}","import { TodosDataType, TodosType } from '../types/types'\r\nimport { db } from './api'\r\n\r\n\r\n\r\nexport const todoAPI = {\r\n    // getTodo: () => {\r\n    //     return db.TodosPath.get()\r\n    //     .then((doc: any) => { return doc.data().userLibrary  })\r\n    //     .catch(() => { return 'Error' })\r\n    // },\r\n    addTodo: (id: string, data: TodosDataType) => {\r\n        return db.TodosCollections.doc(id).set(data)\r\n        .then(() => { return 'Success'  })\r\n        .catch(() => { return 'Error' })\r\n    },\r\n    updateTodo: (id: string, text: string, isChecked: boolean) => {\r\n        return db.TodosCollections.doc(id).update({text: text, isChecked: isChecked})\r\n        .then(() => { return 'Success'  })\r\n        .catch(() => { return 'Error' })\r\n    },\r\n    // deleteTodo: (id: string, text: string, isChecked: boolean) => {\r\n    //     return db.TodosPath.update({ userLibrary: db.TodoAddArray.arrayRemove({ id, text, isChecked }) })\r\n    //     .then(() => { return 'Success' })\r\n    //     .catch(() => { return 'Error' })\r\n    // },\r\n    deleteTodo: (id: string) => {\r\n        return db.TodosCollections.doc(id).delete()\r\n        .then(() => { return 'Success'  })\r\n        .catch(() => { return 'Error' })\r\n    },\r\n    getTodo: (cache: any = 'default') => {  \r\n        const dataArray: Array<TodosType> | any = []\r\n        return db.TodosCollections.get({source: cache})\r\n        .then((querySnapshot: any) => { \r\n            querySnapshot.forEach((item: any)  => {\r\n                console.log(item.id, item.data());\r\n                dataArray.push({id: item.id, data:  item.data() })\r\n            });\r\n            return dataArray\r\n         })\r\n        .catch(()=> { return 'Error' })\r\n        \r\n        // dispatch(actionsReducer.setTodos(dataArray))\r\n    } \r\n    \r\n}\r\n\r\n","import { todoAPI } from \"../api/todo_api\"\r\nimport { TodosType } from \"../types/types\"\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\r\n\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    todos_data: [] as Array<TodosType>\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst todo_reducer = (state = initialState, action: ActionTypes): InitialState => {\r\n\r\n    switch (action.type) {\r\n        case 'SET_TODOS':\r\n            return {\r\n                ...state,\r\n                todos_data: action.payload\r\n            }\r\n\r\n        case 'ADD_TODOS':\r\n            return {\r\n                ...state,\r\n                todos_data: [...state.todos_data, action.payload]\r\n            }\r\n\r\n        case 'DELETE_TODOS':\r\n            return {\r\n                ...state,\r\n                todos_data: state.todos_data.filter((todo: TodosType) => todo.id !== action.payload)\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionTypes = InferActionsType<typeof actionsReducer>\r\n\r\n\r\nexport const actionsReducer = {\r\n    setTodos: (payload: Array<TodosType>) => ({ type: 'SET_TODOS', payload } as const),\r\n    addTodos: (payload: TodosType) => ({ type: 'ADD_TODOS', payload } as const),\r\n    deleteTodos: (payload: string) => ({ type: 'DELETE_TODOS', payload } as const)\r\n}\r\n\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes>\r\n\r\nexport const getTodos = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await todoAPI.getTodo()\r\n    if (data.length !== 0) {\r\n        dispatch(actionsReducer.setTodos(data))\r\n    }\r\n}\r\nexport const addTodos = (id: string, text: string, isChecked: boolean = false): ThunkActionTypes => async (dispatch) => {\r\n    let data = await todoAPI.addTodo(id, {text, isChecked})\r\n    if (data === 'Success') {\r\n        // dispatch(actionsReducer.addTodos({ id, data: { text, isChecked } }))\r\n        dispatch(getTodos())\r\n    }\r\n}\r\n\r\nexport const updateTodos = (id: string, text: string, isChecked: boolean = false): ThunkActionTypes => async (dispatch) => {\r\n    let data = await todoAPI.updateTodo(id, text, isChecked)\r\n    if (data === 'Success') {\r\n        dispatch(getTodos())\r\n    }\r\n}\r\n\r\nexport const deleteTodos = (id: string): ThunkActionTypes => async (dispatch) => {\r\n\r\n    let data = await todoAPI.deleteTodo(id)\r\n    if (data === 'Success') {\r\n        dispatch(actionsReducer.deleteTodos(id))\r\n    }\r\n}\r\n\r\nexport default todo_reducer","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './TodoItem.module.css'\r\n\r\ntype TodoItemType = {\r\n    id: string,\r\n    text: string,\r\n    isChecked: boolean,\r\n    deleteTodoItem: (id: string) => void,\r\n    onChangeChecked: (id: string, text: string, isChecked: boolean) => void\r\n}\r\n\r\nexport const TodoItem: React.FC<TodoItemType> = ({ id, text, isChecked, deleteTodoItem, onChangeChecked }) => {\r\n\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onChanged = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.checked) {\r\n            onChangeChecked(id, text, true)\r\n        } else {\r\n            onChangeChecked(id, text, false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={s.todoItem}>\r\n                {/* <div className=\"card horizontal\">\r\n                    <div className=\"card-stacked\">\r\n                        <div className={\"card-content\"}>\r\n                            <p>{text}</p>\r\n                            <div className=\"card-action\">\r\n                                \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div> */}\r\n                <li>\r\n                    <label>\r\n                        <input type=\"checkbox\" onChange={onChanged} checked={isChecked} />\r\n                        <span className={isChecked ? s.lined : \"\"}>{text}</span>\r\n                    </label>\r\n                    <i className=\"material-icons red-text\" onClick={() => { deleteTodoItem(id) }}>delete</i>\r\n                </li>\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { TodosType } from '../../types/types'\r\nimport { Field, Form, Formik, FormikHelpers, FormikValues } from \"formik\"\r\nimport { actionsReducer, updateTodos, deleteTodos, getTodos, addTodos } from '../../redux/todo_reducer'\r\nimport s from './TodoPage.module.css'\r\nimport uniqId from 'uniqid'\r\nimport { TodoItem } from './TodoItem/TodoItem'\r\nimport { todoAPI } from '../../api/todo_api'\r\nimport { db } from '../../api/api'\r\nimport 'materialize-css/dist/css/materialize.min.css'\r\n\r\nexport const TodoPage = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const todos_reducer: Array<TodosType> = useSelector((state: AppStateType) => state.todo_reducer.todos_data)\r\n\r\n\r\n    const deleteTodoItem = (id: string) => {\r\n        dispatch(deleteTodos(id))\r\n    }\r\n    const onChangeChecked = (id: string, text: string, isChecked: boolean) => {\r\n        dispatch(updateTodos(id, text, isChecked))\r\n    }\r\n\r\n\r\n    let todosMap: Array<TodosType | any> = todos_reducer.map((todo: TodosType) =>\r\n        <TodoItem key={todo.id} id={todo.id} text={todo.data.text} isChecked={todo.data.isChecked} deleteTodoItem={deleteTodoItem} onChangeChecked={onChangeChecked} />)\r\n\r\n    type MyFormValuesType = {\r\n        text: string\r\n    }\r\n    const initialValues: MyFormValuesType = { text: '' }\r\n\r\n    const onSubmitFormik = (values: FormikValues, actions: FormikHelpers<MyFormValuesType>) => {\r\n        dispatch(addTodos(uniqId(), values.text))\r\n        values.text = ''\r\n        values.isChecked = false\r\n        actions.setSubmitting(false)\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.todoForm + \" \" + \"row\"}>\r\n\r\n\r\n            <div className=\"row\">\r\n                <Formik\r\n                    initialValues={initialValues}\r\n                    onSubmit={(values, actions) => {\r\n                        onSubmitFormik(values, actions)\r\n                    }}\r\n                >\r\n                    {({ isSubmitting }) => (\r\n                        <Form className={s.form}>\r\n                            <Field className=\"\" type=\"text\" name=\"text\" placeholder=\"Write your todo item!\" />\r\n                            <button disabled={isSubmitting} className=\"btn waves-effect waves-light\" type=\"submit\">Submit\r\n                            <i className=\"material-icons right\">send</i>\r\n                            </button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n            <div className=\"row\">\r\n                {\r\n                    todos_reducer.length !== 0 ? todosMap : 'Заметок пока нет!'\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <div className=\"row\">\r\n            <nav>\r\n                <div className=\"nav-wrapper\">\r\n                    <a href=\"#\" className=\"brand-logo center\">ToDo NoTe</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};","import React, { useEffect } from 'react'\nimport firebase from 'firebase'\n\nimport './App.css'\nimport { TodoPage } from './components/TodoPage/TodoPage'\nimport { getTodos } from './redux/todo_reducer'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { TodosType } from './types/types'\nimport { AppStateType } from './redux/redux-store'\nimport { Header } from './components/Header/Header'\n\nconst App = () => {\n\n\n  const dispatch = useDispatch()\n  const todos_reducer: Array<TodosType> = useSelector((state: AppStateType) => state.todo_reducer.todos_data)\n\n\n\n  useEffect(() => {\n    dispatch(getTodos())\n  }, [])\n\n\n  const config = {\n    apiKey: \"AIzaSyDwOpDbk5LhGk55y99YJYa9sZPta219Mso\",\n    authDomain: \"react-messenger-273f0.firebaseapp.com\",\n    projectId: \"react-messenger-273f0\",\n    storageBucket: \"react-messenger-273f0.appspot.com\",\n    messagingSenderId: \"157440190043\",\n    appId: \"1:157440190043:web:aa6d87cb52aa72c55c417e\"\n  }\n  \n\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    firebase.firestore().enablePersistence()\n  }\n\n\n\n  // const getData = () => {\n\n  //   var db = firebase.firestore()\n\n\n\n\n  // db.collection(\"users\").add({\n  //   first: \"Ada\",\n  //   last: \"Lovelace\",\n  //   born: 1815\n  // })\n  //   .then((docRef) => {\n  //     console.log(\"Document written with ID: \", docRef.id);\n  //   })\n  //   .catch((error) => {\n  //     console.error(\"Error adding document: \", error);\n  //   });\n\n  //   db.collection(\"users\").get().then((querySnapshot) => {\n  //     querySnapshot.forEach((doc) => {\n  //         console.log(`${doc.id} => ${doc.data()}`);\n  //     });\n  // });\n\n  // var citiesRef = db.collection(\"users\");\n\n\n  // citiesRef.doc(\"Nastya\").set({\n  //   name: 'Nastya', state: \"Samara\", country: \"Russia\", description: 'I love you :)'});\n  //   // .then((citiesRef) => {\n  //   //       console.log(\"Document written with ID: \", citiesRef.id);\n  //   //     })\n  //   //     .catch((error) => {\n  //   //       console.error(\"Error adding document: \", error);\n  //   //     });\n\n  // var docRef = db.collectionGroup(\"users\").doc(\"Nastya\").collectionGroup(\"users\");\n\n  // docRef.get().then((querySnapshot) => {\n  //   console.log(querySnapshot)\n\n  //   querySnapshot.forEach((doc) => {\n  //     console.log(`${doc.id} => ${doc.data()}`);\n\n  //   })\n  // var citiesRef = db.collection('users');\n\n  // var landmarks = Promise.all([\n  //   citiesRef.doc('SF').collection('landmarks').doc().set({\n  //     name: 'Golden Gate Bridge',\n  //     type: 'bridge'\n  //   }),\n  //   citiesRef.doc('SF').collection('landmarks').doc().set({\n  //     name: 'Legion of Honor',\n  //     type: 'museum'\n  //   }),\n  //   citiesRef.doc('LA').collection('landmarks').doc().set({\n  //     name: 'Griffith Park',\n  //     type: 'park'\n  //   }),\n  //   citiesRef.doc('LA').collection('landmarks').doc().set({\n  //     name: 'The Getty',\n  //     type: 'museum'\n  //   }),\n  //   citiesRef.doc('DC').collection('landmarks').doc().set({\n  //     name: 'Lincoln Memorial',\n  //     type: 'memorial'\n  //   }),\n  //   citiesRef.doc('DC').collection('landmarks').doc().set({\n  //     name: 'National Air and Space Museum',\n  //     type: 'museum'\n  //   }),\n  //   citiesRef.doc('TOK').collection('landmarks').doc().set({\n  //     name: 'Ueno Park',\n  //     type: 'park'\n  //   }),\n  //   citiesRef.doc('TOK').collection('landmarks').doc().set({\n  //     name: 'National Museum of Nature and Science',\n  //     type: 'museum'\n  //   }),\n  //   citiesRef.doc('BJ').collection('landmarks').doc().set({\n  //     name: 'Jingshan Park',\n  //     type: 'park'\n  //   }),\n  //   citiesRef.doc('BJ').collection('landmarks').doc().set({\n  //     name: 'Beijing Ancient Observatory',\n  //     type: 'museum'\n  //   })\n  // ]);\n\n  // if (doc.exists) {\n  //   console.log(\"Document data:\", doc.data());\n  //   setData(doc.data())\n  // } else {\n  //   // doc.data() will be undefined in this case\n  //   console.log(\"No such document!\");\n  // }\n  // }).catch ((error) => {\n  //   console.log(\"Error getting document:\", error);\n  // });\n\n\n  // var museums = db.collectionGroup('landmarks');\n  // museums.get().then((querySnapshot) => {\n  //   querySnapshot.forEach((doc) => {\n  //     console.log(doc);\n\n  //   });\n  // });\n\n  // let myLibrary: any = [\n  //   { text: 'Убраться дома!', isChecked: 'false' },\n  //   { text: 'Купить хлеб)', isChecked: 'true' },\n  //   { text: 'Сделать машину', isChecked: 'false' },\n  // ];\n  // let firestore = firebase.firestore();\n\n  // let docRef = firestore.doc(\"userBooks/library\");\n  // const saveLibrary = function () {\n  //   docRef\n  //     .get().then((doc: any) => {\n  //       console.log(doc.data().userLibrary);\n\n  //     })\n  // .set({\n  //   userLibrary: myLibrary,\n  // })\n  // .then(function () {\n  //   console.log(\"Library saved!\");\n  // })\n  // .catch(function (error) {\n  //   console.log(\"Got an error: \", error);\n  // });\n  // };\n  //   saveLibrary()\n  // }\n  // useEffect({\n  //   Firebase()\n  // },[])\n\n  return (\n    <div className=\"container-my\">\n      <Header/>\n      <TodoPage />\n    </div>)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk'\r\nimport todo_reducer from \"./todo_reducer\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    todo_reducer: todo_reducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type BaseThunkType <A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\n\n\n\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}