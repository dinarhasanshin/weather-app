{"version":3,"sources":["components/TodoPage/TodoPage.module.css","api/api.ts","api/todo_api.ts","redux/todo_reducer.ts","components/TodoPage/TodoPage.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","db","TodosPath","firestore","doc","TodoAddArray","FieldValue","todoAPI","get","then","data","userLibrary","text","isChecked","update","arrayUnion","initialState","todos_data","actionsReducer","payload","type","todo_reducer","state","action","TodoPage","dispatch","useDispatch","todos_reducer","useSelector","useEffect","a","todosMap","map","todo","className","s","lined","checked","onSubmitFormik","values","actions","console","log","setSubmitting","initialValues","onSubmit","isSubmitting","name","placeholder","disabled","App","appp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b938ce25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lined\":\"TodoPage_lined__1L0yi\"};","import firebase from \"firebase\"\r\n\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDwOpDbk5LhGk55y99YJYa9sZPta219Mso\",\r\n    authDomain: \"react-messenger-273f0.firebaseapp.com\",\r\n    projectId: \"react-messenger-273f0\",\r\n    storageBucket: \"react-messenger-273f0.appspot.com\",\r\n    messagingSenderId: \"157440190043\",\r\n    appId: \"1:157440190043:web:aa6d87cb52aa72c55c417e\"\r\n  }\r\n\r\n\r\n  if (!firebase.apps.length) {\r\n    firebase.initializeApp(config);\r\n  }\r\n  let firestore = firebase.firestore()\r\n\r\nexport const db = {\r\n    TodosPath: firestore.doc(\"userBooks/library\"),\r\n    TodoAddArray: firebase.firestore.FieldValue\r\n}","import { TodosType } from '../types/types'\r\nimport { db } from './api'\r\n\r\n\r\n\r\nexport const todoAPI = {\r\n    getTodo: () => {\r\n        return db.TodosPath.get().then((doc: any) => { return doc.data().userLibrary  })\r\n    },\r\n    setTodo: (todos: TodosType) => {\r\n        return db.TodosPath.set([{ todos }]).then(() => { console.log('LibrarySaved') })\r\n    },\r\n    addTodo: (text: string, isChecked: boolean) => {\r\n        return db.TodosPath.update({ userLibrary: db.TodoAddArray.arrayUnion({text, isChecked}) }).then(() => { return 'Success'  })\r\n    }\r\n}\r\n\r\n","import { todoAPI } from \"../api/todo_api\"\r\nimport { TodosType } from \"../types/types\"\r\nimport { BaseThunkType, InferActionsType } from \"./redux-store\"\r\n\r\n\r\n\r\n\r\n\r\nlet initialState = {\r\n    todos_data: [] as Array<TodosType>\r\n}\r\n\r\ntype InitialState = typeof initialState\r\n\r\nconst todo_reducer = (state = initialState, action: ActionTypes ): InitialState => {\r\n\r\n    switch(action.type){\r\n        case 'SET_TODOS':\r\n            return {...state, todos_data: action.payload}\r\n\r\n        case 'ADD_TODOS':\r\n            return {...state, todos_data: [...state.todos_data, action.payload]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\ntype ActionTypes = InferActionsType<typeof actionsReducer>\r\n\r\n\r\nexport const actionsReducer = {\r\n    setTodos: (payload: Array<TodosType>) => ({ type: 'SET_TODOS', payload } as const),\r\n    addTodos: (payload: TodosType) => ({ type: 'ADD_TODOS', payload } as const)\r\n}\r\n\r\n\r\ntype ThunkActionTypes = BaseThunkType<ActionTypes>\r\n\r\nexport const getTodos = (): ThunkActionTypes => async (dispatch) => {\r\n    let data = await todoAPI.getTodo()\r\n    dispatch(actionsReducer.setTodos(data))\r\n}\r\n// export const setTodos = (payload: TodosType): ThunkActionTypes => async (dispatch) => {\r\n//     let data = await todoAPI.setTodo(payload)\r\n//     debugger\r\n//     // dispatch(actionsReducer.setTodos(data))\r\n// }\r\nexport const addTodos = (text: string, isChecked: boolean): ThunkActionTypes => async (dispatch) => {\r\n    let data = await todoAPI.addTodo(text, isChecked)\r\n    if(data === 'Success'){\r\n        dispatch(actionsReducer.addTodos({text, isChecked}))\r\n    }\r\n    \r\n}\r\n\r\nexport default todo_reducer","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport { TodosType } from '../../types/types'\r\nimport { Field, Form, Formik, FormikHelpers, FormikValues } from \"formik\"\r\nimport { actionsReducer, addTodos, getTodos } from '../../redux/todo_reducer'\r\nimport { todoAPI } from '../../api/todo_api'\r\nimport s from './TodoPage.module.css'\r\n\r\nexport const TodoPage = () => {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    const todos_reducer: Array<TodosType> = useSelector((state: AppStateType) => state.todo_reducer.todos_data)\r\n\r\n    // const GetTodos = () => {\r\n    //     dispatch(getTodos())\r\n    // }\r\n    // const AddTodos = () => {\r\n    //     dispatch(addTodos(\"Хлеб 13\", false))\r\n    // }\r\n\r\n    useEffect(() => {\r\n        dispatch(getTodos())\r\n    }, [])\r\n\r\n\r\n    let todosMap: Array<TodosType | any> = todos_reducer.map((todo: TodosType) => <div className={ todo.isChecked ? s.lined : '' }> { todo.text } <input type=\"checkbox\" checked={todo.isChecked}/> </div>) \r\n\r\n    type MyFormValuesType = {\r\n        text: string,\r\n        isChecked: boolean\r\n    }\r\n    const initialValues: MyFormValuesType = { text: '', isChecked: false}\r\n\r\n    const onSubmitFormik = (values: FormikValues, actions: FormikHelpers<MyFormValuesType>) => {\r\n        console.log(values.text, values.isChecked);\r\n        dispatch(addTodos(values.text, values.isChecked))\r\n        values.text = ''\r\n        values.isChecked = false\r\n        actions.setSubmitting(false)\r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={(values, actions) => {\r\n                    onSubmitFormik(values, actions)\r\n                }}\r\n            >\r\n                {({ isSubmitting }) => (\r\n                    <Form>\r\n                        <Field type=\"text\" name=\"text\" placeholder=\"Write your todo item!\" />\r\n                        <Field type=\"checkbox\" name=\"isChecked\"/>\r\n                        <button type=\"submit\" disabled={isSubmitting}>Find</button>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n            {\r\n                todosMap\r\n            }\r\n            {/* <button onClick={() => { GetTodos() }}>Get</button> */}\r\n            {/* <button onClick={() => { AddTodos() }}>Add</button> */}\r\n        </div>\r\n    )\r\n}","import React, { useEffect } from 'react'\nimport firebase from 'firebase'\n\nimport './App.css'\nimport { TodoPage } from './components/TodoPage/TodoPage'\n\nconst App = () => {\n\n\n  useEffect(() =>{\n    appp()\n  }, [])\n\n  const appp = () => {\n    const config = {\n      apiKey: \"AIzaSyDwOpDbk5LhGk55y99YJYa9sZPta219Mso\",\n      authDomain: \"react-messenger-273f0.firebaseapp.com\",\n      projectId: \"react-messenger-273f0\",\n      storageBucket: \"react-messenger-273f0.appspot.com\",\n      messagingSenderId: \"157440190043\",\n      appId: \"1:157440190043:web:aa6d87cb52aa72c55c417e\"\n    }\n  \n  \n    if (!firebase.apps.length) {\n      firebase.initializeApp(config);\n    }\n  }\n\n\n  // const getData = () => {\n\n  //   var db = firebase.firestore()\n\n\n    \n\n    // db.collection(\"users\").add({\n    //   first: \"Ada\",\n    //   last: \"Lovelace\",\n    //   born: 1815\n    // })\n    //   .then((docRef) => {\n    //     console.log(\"Document written with ID: \", docRef.id);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error adding document: \", error);\n    //   });\n\n    //   db.collection(\"users\").get().then((querySnapshot) => {\n    //     querySnapshot.forEach((doc) => {\n    //         console.log(`${doc.id} => ${doc.data()}`);\n    //     });\n    // });\n\n    // var citiesRef = db.collection(\"users\");\n\n\n    // citiesRef.doc(\"Nastya\").set({\n    //   name: 'Nastya', state: \"Samara\", country: \"Russia\", description: 'I love you :)'});\n    //   // .then((citiesRef) => {\n    //   //       console.log(\"Document written with ID: \", citiesRef.id);\n    //   //     })\n    //   //     .catch((error) => {\n    //   //       console.error(\"Error adding document: \", error);\n    //   //     });\n\n    // var docRef = db.collectionGroup(\"users\").doc(\"Nastya\").collectionGroup(\"users\");\n\n    // docRef.get().then((querySnapshot) => {\n    //   console.log(querySnapshot)\n\n    //   querySnapshot.forEach((doc) => {\n    //     console.log(`${doc.id} => ${doc.data()}`);\n\n    //   })\n    // var citiesRef = db.collection('users');\n\n    // var landmarks = Promise.all([\n    //   citiesRef.doc('SF').collection('landmarks').doc().set({\n    //     name: 'Golden Gate Bridge',\n    //     type: 'bridge'\n    //   }),\n    //   citiesRef.doc('SF').collection('landmarks').doc().set({\n    //     name: 'Legion of Honor',\n    //     type: 'museum'\n    //   }),\n    //   citiesRef.doc('LA').collection('landmarks').doc().set({\n    //     name: 'Griffith Park',\n    //     type: 'park'\n    //   }),\n    //   citiesRef.doc('LA').collection('landmarks').doc().set({\n    //     name: 'The Getty',\n    //     type: 'museum'\n    //   }),\n    //   citiesRef.doc('DC').collection('landmarks').doc().set({\n    //     name: 'Lincoln Memorial',\n    //     type: 'memorial'\n    //   }),\n    //   citiesRef.doc('DC').collection('landmarks').doc().set({\n    //     name: 'National Air and Space Museum',\n    //     type: 'museum'\n    //   }),\n    //   citiesRef.doc('TOK').collection('landmarks').doc().set({\n    //     name: 'Ueno Park',\n    //     type: 'park'\n    //   }),\n    //   citiesRef.doc('TOK').collection('landmarks').doc().set({\n    //     name: 'National Museum of Nature and Science',\n    //     type: 'museum'\n    //   }),\n    //   citiesRef.doc('BJ').collection('landmarks').doc().set({\n    //     name: 'Jingshan Park',\n    //     type: 'park'\n    //   }),\n    //   citiesRef.doc('BJ').collection('landmarks').doc().set({\n    //     name: 'Beijing Ancient Observatory',\n    //     type: 'museum'\n    //   })\n    // ]);\n\n    // if (doc.exists) {\n    //   console.log(\"Document data:\", doc.data());\n    //   setData(doc.data())\n    // } else {\n    //   // doc.data() will be undefined in this case\n    //   console.log(\"No such document!\");\n    // }\n    // }).catch ((error) => {\n    //   console.log(\"Error getting document:\", error);\n    // });\n\n\n    // var museums = db.collectionGroup('landmarks');\n    // museums.get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     console.log(doc);\n\n    //   });\n    // });\n\n    // let myLibrary: any = [\n    //   { text: 'Убраться дома!', isChecked: 'false' },\n    //   { text: 'Купить хлеб)', isChecked: 'true' },\n    //   { text: 'Сделать машину', isChecked: 'false' },\n    // ];\n    // let firestore = firebase.firestore();\n\n    // let docRef = firestore.doc(\"userBooks/library\");\n    // const saveLibrary = function () {\n    //   docRef\n    //     .get().then((doc: any) => {\n    //       console.log(doc.data().userLibrary);\n\n    //     })\n    // .set({\n    //   userLibrary: myLibrary,\n    // })\n    // .then(function () {\n    //   console.log(\"Library saved!\");\n    // })\n    // .catch(function (error) {\n    //   console.log(\"Got an error: \", error);\n    // });\n    // };\n    //   saveLibrary()\n    // }\n    // useEffect({\n    //   Firebase()\n    // },[])\n\n    return (\n      <div className=\"container\">\n        <TodoPage />\n      </div>\n    );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Action, applyMiddleware, combineReducers, compose, createStore } from \"redux\";\r\nimport thunkMiddleWare, { ThunkAction } from 'redux-thunk'\r\nimport todo_reducer from \"./todo_reducer\";\r\n\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n    todo_reducer: todo_reducer\r\n})\r\n\r\ntype RootReducerType = typeof rootReducer\r\n\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never\r\n\r\nexport type InferActionsType<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nexport type BaseThunkType <A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleWare)))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './redux/redux-store';\n\n\n\n\n\nReactDOM.render(\n  <Provider store={ store }>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}