{"version":3,"sources":["App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["App","useState","data","setData","firebase","apps","length","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","className","country","state","name","description","onClick","firestore","collection","doc","get","then","exists","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oPAwFeA,MAnFf,WAAgB,IAAD,EAGWC,mBAAc,IAHzB,mBAGNC,EAHM,KAGAC,EAHA,KAsEb,OArDKC,IAASC,KAAKC,QACjBF,IAASG,cAXI,CACbC,OAAQ,0CACRC,WAAY,wCACZC,UAAW,wBACXC,cAAe,oCACfC,kBAAmB,eACnBC,MAAO,8CA0DP,qBAAKC,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,qCAASZ,EAAKa,QAAd,OACA,qCAASb,EAAKc,MAAd,OACA,qCAASd,EAAKe,KAAd,OACA,qCAASf,EAAKgB,YAAd,OACA,wBAAQJ,UAAU,UAAUK,QAAS,WAtDhCf,IAASgB,YAgCFC,WAAW,SAASC,IAAI,UAEjCC,MAAMC,MAAK,SAACF,GACbA,EAAIG,QACNC,QAAQC,IAAI,iBAAkBL,EAAIpB,QAClCC,EAAQmB,EAAIpB,SAGZwB,QAAQC,IAAI,wBAEbC,OAAM,SAACC,GACRH,QAAQC,IAAI,0BAA2BE,OAWrC,qBCtEFC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTb,MAAK,SAACkB,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,YAI1BrB,QAAQC,IACN,+GAKEW,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBhB,QAAQC,IAAI,sCAGRW,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5Bd,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,MCjGjE,IAYeqB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFUnB,SAAkBxB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwB,IAAIC,eAAwBhC,OAAOC,SAASgC,MACpDC,SAAWlC,OAAOC,SAASiC,OAIvC,OAGFlC,OAAOmC,iBAAiB,QAAQ,WAC9B,IAAM9B,EAAK,UAAM2B,eAAN,sBAEPlC,IAgEV,SAAiCO,EAAeC,GAE9C8B,MAAM/B,EAAO,CACXgC,QAAS,CAAE,iBAAkB,YAE5B7C,MAAK,SAAC8C,GAEL,IAAMC,EAAcD,EAASD,QAAQ9C,IAAI,gBAEnB,MAApB+C,EAASE,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5ClC,UAAUC,cAAckC,MAAMlD,MAAK,SAACkB,GAClCA,EAAaiC,aAAanD,MAAK,WAC7BQ,OAAOC,SAAS2C,eAKpBxC,EAAgBC,EAAOC,MAG1BV,OAAM,WACLF,QAAQC,IAAI,oEAtFVkD,CAAwBxC,EAAOC,GAI/BC,UAAUC,cAAckC,MAAMlD,MAAK,WACjCE,QAAQC,IACN,+GAMJS,EAAgBC,EAAOC,OEhC/BwC,GAKA5B,M","file":"static/js/main.3948d74c.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport firebase from 'firebase'\nimport 'firebase/firestore'\nimport './App.css'\n\nfunction App() {\n\n\n  const [data, setData] = useState<any>({})\n\n\n\n  const config = {\n    apiKey: \"AIzaSyDwOpDbk5LhGk55y99YJYa9sZPta219Mso\",\n    authDomain: \"react-messenger-273f0.firebaseapp.com\",\n    projectId: \"react-messenger-273f0\",\n    storageBucket: \"react-messenger-273f0.appspot.com\",\n    messagingSenderId: \"157440190043\",\n    appId: \"1:157440190043:web:aa6d87cb52aa72c55c417e\"\n  }\n\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n  }\n\n  const getData = () => {\n\n    var db = firebase.firestore()\n\n    // db.collection(\"users\").add({\n    //   first: \"Ada\",\n    //   last: \"Lovelace\",\n    //   born: 1815\n    // })\n    //   .then((docRef) => {\n    //     console.log(\"Document written with ID: \", docRef.id);\n    //   })\n    //   .catch((error) => {\n    //     console.error(\"Error adding document: \", error);\n    //   });\n\n    //   db.collection(\"users\").get().then((querySnapshot) => {\n    //     querySnapshot.forEach((doc) => {\n    //         console.log(`${doc.id} => ${doc.data()}`);\n    //     });\n    // });\n\n    // var citiesRef = db.collection(\"users\");\n\n\n    // citiesRef.doc(\"Nastya\").set({\n    //   name: 'Nastya', state: \"Samara\", country: \"Russia\", description: 'I love you :)'});\n    //   // .then((citiesRef) => {\n    //   //       console.log(\"Document written with ID: \", citiesRef.id);\n    //   //     })\n    //   //     .catch((error) => {\n    //   //       console.error(\"Error adding document: \", error);\n    //   //     });\n\n    var docRef = db.collection(\"users\").doc(\"Nastya\");\n\n    docRef.get().then((doc) => {\n      if (doc.exists) {\n        console.log(\"Document data:\", doc.data());\n        setData(doc.data())\n      } else {\n        // doc.data() will be undefined in this case\n        console.log(\"No such document!\");\n      }\n    }).catch((error) => {\n      console.log(\"Error getting document:\", error);\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"counter\">\n        <span> { data.country } </span>\n        <span> { data.state } </span>\n        <span> { data.name } </span>\n        <span> { data.description } </span>\n        <button className=\"btn__up\" onClick={() => { getData() }}>+</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}